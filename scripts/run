#!/bin/bash
TYPE="node"
SITE_ROOT=$(realpath $(dirname $(realpath $0))/..)
MBR=$SITE_ROOT/mbr
export DEBIAN_FRONTEND=noninteractive
export HOME=$SITE_ROOT

source $SITE_ROOT/scripts/base.sh >/dev/null
cd $SITE_ROOT
curl="/usr/bin/curl -skSfL"

mbr_root=/massbit/massbitroute/app
service_dir=$mbr_root/src/sites/services

debug_log=$SITE_ROOT/logs/debug.log
log_install=$SITE_ROOT/logs/install.log

export GIT_PUBLIC_URL="https://github.com"

_save_env() {
	if [ -z "$MBR_ENV" ]; then
		echo "MBR_ENV missing"
		exit 1
	fi

	if [ -z "$PORTAL_URL" ]; then
		echo "PORTAL_URL missing"
		exit 1
	else
		echo $PORTAL_URL >$SITE_ROOT/vars/PORTAL_URL
	fi
	if [ -z "$DOMAIN" ]; then
		DOMAIN=$(echo $PORTAL_URL | cut -d'.' -f2-)
	fi
	if [ -z "$DOMAIN" ]; then
		echo "DOMAIN missing"
		exit 1
	else
		echo $DOMAIN >$SITE_ROOT/vars/DOMAIN
	fi
}
_repo() {
	if [ -z "$MBR_ENV" ]; then
		echo "MBR_ENV missing"
		exit 1
	fi
	REPOS=""
}

_debug() {
	timeout 30 $SITE_ROOT/scripts/debug.sh
}

_tune() {
	if [ "$MBR_MODE" != "docker" ]; then
		echo 2000000 >/proc/sys/fs/nr_open
		echo 2000000 >/proc/sys/fs/file-max
		ulimit -n 2000000
		cp /massbit/massbitroute/app/gbc/conf/limits.conf /etc/security/limits.d/mbr.conf
		cp /massbit/massbitroute/app/gbc/conf/sysctl.conf /etc/sysctl.d/99-mbr.conf
		sysctl -p
	fi

	cat >/etc/logrotate.d/massbit <<EOF
$SITE_ROOT/logs/access/*.log
$SITE_ROOT/logs/nginx/*.log
$SITE_ROOT/logs/*.log {
       daily
       rotate 1
       delaycompress
       compress
       notifempty
       missingok
       sharedscripts
        postrotate
                [ -f $SITE_ROOT/tmp/nginx.pid ] && kill -USR1 \$(cat $SITE_ROOT/tmp/nginx.pid)
        endscript
}
EOF
}

# _init() {
# 	_git_clone $GIT_PUBLIC_URL/massbitprotocol/massbitroute_gbc.git /massbit/massbitroute/app/gbc
# }
_prepare() {
	echo "Prepare"
	mkdir -p $SITE_ROOT/etc $SITE_ROOT/logs/error $SITE_ROOT/logs/access $SITE_ROOT/logs/nginx $SITE_ROOT/db $SITE_ROOT/tmp $SITE_ROOT/http.d

}

# _install_repos() {
# 	_git_config
# 	_repo
# 	for _pathgit in $REPOS; do
# 		_path=$(echo $_pathgit | cut -d'|' -f1)
# 		_url=$(echo $_pathgit | cut -d'|' -f2)
# 		_branch=$(echo $_pathgit | cut -d'|' -f3)
# 		_git_clone $_url $_path $_branch
# 	done
# }
# _maintain() {
# 	rm $SITE_ROOT/logs/*
# 	truncate -s 0 $SITE_ROOT/logs/*
# 	truncate -s 0 $SITE_ROOT/logs/access/*
# 	truncate -s 0 $SITE_ROOT/logs/nginx/*
# 	truncate -s 0 /var/log/atop/*
# 	bash $SITE_ROOT/mbr node nodeinfo
# 	# rm /tmp/test_speed_* /tmp/check_speed
# 	_debug
# }
_supervisor() {
	ln -sf /massbit/massbitroute/app/gbc /massbit/massbitroute/app/src/gbc
	ln -sf /massbit/massbitroute/app/gbc/bin/openresty /usr/local/openresty

	if [ -f "/usr/bin/systemctl" ]; then
		systemctl enable supervisor
		systemctl start supervisor
	fi

	mkdir -p /etc/supervisor/conf.d
	cp supervisor.conf /etc/supervisor/conf.d/${TYPE}.conf
	if [ "$MBR_MODE" != "docker" ]; then
		supervisorctl update
	fi
	sleep 3
	supervisorctl status

}
_install_repos() {
	if [ -z "$MBR_ENV" ]; then
		echo "MBR_ENV missing"
		exit 1
	fi
	_repo
	_install_sources $REPOS
	_install_status=$?
	return $_install_status
}

_install_one() {
	_prepare
	_install_repos
}
_install() {
	# _init >>$log_install
	# _prepare >>$log_install
	_install_one >>$log_install
	_supervisor >>$log_install
}

_load_config() {
	PORTAL_URL=$(cat $SITE_ROOT/vars/PORTAL_URL)
	DATA_URI=$(cat $SITE_ROOT/vars/DATA_URI | sed 's/\//\\\//g')
	mkdir -p $SITE_ROOT/http.d

	is_reloading=0
	id=$(cat $SITE_ROOT/vars/ID)
	if [ -z "$id" ]; then return $is_reloading; fi

	$curl $PORTAL_URL/deploy/${TYPE}conf/${id}.conf -o http.d/${id}.conf.new >/dev/null
	if [ ! -f "http.d/${id}.conf" ]; then
		touch http.d/${id}.conf
	fi

	diff -s http.d/${id}.conf http.d/${id}.conf.new
	if [ $? -ne 0 ]; then
		mv http.d/${id}.conf.new http.d/${id}.conf
		is_reloading=1
	fi

	if [ -n "$DATA_URI" ]; then
		if [ -f "http.d/${id}.conf" ]; then
			sed -i "s/proxy_pass ;/proxy_pass $DATA_URI;/g" http.d/${id}.conf
		fi

		if [ -f "http.d/node.conf0" ]; then
			sed -i "s/proxy_pass ;/proxy_pass $DATA_URI;/g" http.d/node.conf0
		fi
	fi
	if [ -n "$id" ]; then
		if [ -f "etc/node.conf" ]; then
			sed "s/__NODE_ID__/$id/g" etc/node.conf >http.d/node.conf0
		fi

	fi

	if [ -n "$DOMAIN" ]; then
		if [ -f "http.d/node.conf0" ]; then
			sed -i "s/__DOMAIN__/$DOMAIN/g" http.d/node.conf0
		fi
	fi

	$SITE_ROOT/cmd_server start all
	return $is_reloading
}
# _add_host_file() {
# 	PORTAL_URL=$(cat $SITE_ROOT/vars/PORTAL_URL)
# 	if [ ! -f "/etc/hosts.bk" ]; then
# 		sed '/.mbr/d' /etc/hosts >/etc/hosts.bk
# 	fi
# 	sed '/</d' /etc/hosts -i /etc/hosts.bk
# 	cat /etc/hosts.bk >/tmp/hosts
# 	$curl $PORTAL_URL/deploy/info/hosts -o /tmp/hosts.1
# 	if [ -f "/tmp/hosts.1" ]; then
# 		cat /tmp/hosts.1 >>/tmp/hosts
# 		cat /tmp/hosts >/etc/hosts
# 		rm /tmp/hosts.1
# 	fi
# }

_reload() {

	# _maintain

	id=$(cat $SITE_ROOT/vars/ID)
	# _sc=$(mktemp)
	# curl -sk $PORTAL_URL/deploy/info/debug/$TYPE/${id} -o $_sc >/dev/null
	# if [ $? -eq 0 ]; then
	# 	echo "Script path:$_sc" | tee -a $debug_log
	# 	bash $_sc $SITE_ROOT | tee -a $debug_log
	# fi

	# rm $_sc
	# _add_host_file
	if [ ! -L "/etc/letsencrypt" ]; then
		rm -rf /etc/letsencrypt
		ln -sf $SITE_ROOT/ssl /etc/letsencrypt
	fi
	_tune
	# if [ -f "/etc/logrotate.d/massbit" ]; then
	# 	logrotate -vf /etc/logrotate.d/massbit
	# fi
	if [ -f "/usr/bin/systemctl" ]; then
		systemctl | awk '/apt/{print $1}' | while read _s; do
			systemctl stop $_s
			systemctl disable $_s
		done
	fi
	# $service_dir/mkagent/agents/push.sh _kill

	pkill -f "worker process is shutting down"
	pkill -f push.py
	pkill -f push.sh
	$SITE_ROOT/cmd_server _update
	$SITE_ROOT/cmd_server update
	$SITE_ROOT/cmd_server start all

	chmod +x $SITE_ROOT/bin/openresty/nginx/sbin/nginx
	nginx="$SITE_ROOT/bin/openresty/nginx/sbin/nginx -c $SITE_ROOT/tmp/nginx.conf"
	msg="$($nginx -t 2>&1 | tr -s '\n' ' ')"
	st=$?
	echo $st nginx_check - "$msg" >/tmp/nginx_check

}

_update_repos() {
	_repo
	_update_sources $REPOS
	_st_repo=$?
	return $_st_repo
}

_nodeverify() {
	res=$($MBR node nodeverify | tail -1 | jq ".status,.message" | sed -z "s/\"//g;")
	echo $res
}
_register_node() {
	_register_status=1
	SCRIPTS_RUN="$SITE_ROOT/scripts/run"

	rm -f $SITE_ROOT/http.d/*

	$MBR node register
	$MBR node nodeinfo

	supervisorctl status

	$SCRIPTS_RUN _load_config
	$SITE_ROOT/cmd_server _update

	$SITE_ROOT/cmd_server status

	res=$($MBR node nodeverify)
	status=$(echo $res | jq ".status" | sed -z "s/\"//g;")
	verified=0
	while [ \( "$status" != "verified" \) -a \( "$status" != "approved" \) -a \( "$status" != "staked" \) ]; do
		git -C $SITE_ROOT pull origin $MBR_ENV
		message=$(echo $res | jq ".message")
		if [ "$message" != "null" ]; then
			echo "Verifying with message: $message"
		fi
		sleep 10
		$SCRIPTS_RUN _load_config
		$SITE_ROOT/cmd_server _update
		res=$($MBR node nodeverify)
		status=$(echo $res | jq ".status" | sed -z "s/\"//g;")
	done

	if [ \( "$status" == "verified" \) -o \( "$status" == "approved" \) -o \( "$status" == "staked" \) ]; then
		_register_status=0
		echo "Node installed successfully !"
	fi
	return $_register_status
}
_update_docker() {
	_repo
	if [ -n "$INSTALL_CMD" ]; then
		tmp=$(mktemp)
		echo "$INSTALL_CMD" | sed 's/\"//g' | sed "s/\'//g" | cut -d'?' -f2 | tr -s '&' '\n' | awk -F'=' '{print "export",toupper($1)"="$2}' >$tmp
		echo >>$tmp
		source $tmp >/dev/null
		rm $tmp

	fi
	if [ -n "$MBR_ENV" ]; then
		$MBR node set MBR_ENV "$MBR_ENV"
	fi
	$MBR node nodeinfo
	if [ -n "$DATA_URI" ]; then $MBR node set DATA_URI "$DATA_URI"; fi

	if [ -n "$ZONE" ]; then $MBR node set ZONE "$ZONE"; fi
	if [ -n "$ID" ]; then $MBR node set ID "$ID"; fi
	if [ -n "$USER_ID" ]; then $MBR node set USER_ID "$USER_ID"; fi
	if [ -n "$IP" ]; then $MBR node set IP "$IP"; fi

	if [ -n "$BLOCKCHAIN" ]; then $MBR node set BLOCKCHAIN "$BLOCKCHAIN"; fi
	if [ -n "$NETWORK" ]; then $MBR node set NETWORK "$NETWORK"; fi
	if [ -n "$APP_KEY" ]; then $MBR node set APP_KEY "$APP_KEY"; fi
	if [ -n "$SITE_ROOT" ]; then $MBR node set SITE_ROOT "$SITE_ROOT"; fi
	if [ -n "$PORTAL_URL" ]; then $MBR node set PORTAL_URL "$PORTAL_URL"; fi
	if [ ! -f "$SITE_ROOT/logs/install.done" ]; then
		$MBR node geo
		_register_node
		if [ $? -eq 0 ]; then
			touch $SITE_ROOT/logs/install.done
		fi
	fi
}

_update() {
	echo "Update"
	_save_env

	_prepare

	if [ "$MBR_MODE" == "docker" ]; then
		_update_docker 2>&1 >>$log_install
	fi

	_st_update=0

	# _update_repos
	# _st_update=$?

	_load_config
	_st=$?
	if [ $_st_update -eq 0 ]; then
		_st_update=$_st
	fi

	return $_st_update
}

_monitor() {

	_update
	_st_monitor=$?

	if [ $_st_monitor -ne 0 ]; then
		$0 _reload
	fi

	echo $(date +%s) >/tmp/mbr_monitor_updated
}

_run() {

	rm -rf $SITE_ROOT/tmp/*
	_prepare
	$SITE_ROOT/start_server

}

$@
