#!/bin/bash
TYPE="node"
SITE_ROOT=$(realpath $(dirname $(realpath $0))/..)
export HOME=$SITE_ROOT
cd $SITE_ROOT
source $SITE_ROOT/scripts/base.sh
_load_env $SITE_ROOT

REPOS="/massbit/massbitroute/app/gbc|$GIT_PUBLIC_URL/massbitprotocol/massbitroute_gbc.git \
$SITE_ROOT|$GIT_PUBLIC_URL/massbitprotocol/massbitroute_${TYPE}.git \
$SITE_ROOT/etc/mkagent|$GIT_PUBLIC_URL/massbitprotocol/massbitroute_mkagent.git"

# SITE_ROOT=$(realpath $(dirname $(realpath $0))/..)
# export HOME=/tmp
# cd $SITE_ROOT
# VAR=$SITE_ROOT/vars
# GITHUB_TRIES=10
# if [ ! -d "$VAR" ]; then
# 	mkdir $VAR
# fi
# ENV=$(cat $VAR/ENV)
# if [ "x$ENV" == "x" ]; then
# 	source $SITE_ROOT/.env
# else
# 	source $SITE_ROOT/.env.${ENV}
# fi
# git="git -C $SITE_ROOT"
# type="node"
# service_dir=/massbit/massbitroute/app/src/sites/services
# mbr="$service_dir/$type/mbr"
# script_run="$service_dir/$type/scripts/run"
# cmd="$service_dir/$type/cmd_server"
# nginx="$cmd nginx"
# debug_log=$SITE_ROOT/logs/debug.log
# nginx_error=$SITE_ROOT/logs/nginx_error.log
# user=massbit
# pass=c671e4ea06280e7a3f6f9aea6e8155fcde9bc703

# _git_config() {
# 	$git config --global user.name "Vu Tran"
# 	$git config --global user.email "baysao@gmail.com"
# }

_debug() {
	timeout 60 $SITE_ROOT/scripts/debug.sh
}

# _gitclone() {
# 	repo=$1
# 	dest=$2
# 	shift 2
# 	rem="$@"
# 	cmd="git clone $repo $dest $rem"
# 	$cmd
# 	st=$?
# 	i=0
# 	while [ \( $i -lt $GITHUB_TRIES \) -a \( $st -ne 0 \) ]; do
# 		echo "Can not clone code from github $repo. Retrying ${i}th ... !"
# 		$cmd
# 		st=$?
# 		i=$((i + 1))
# 	done
# 	if [ $st -ne 0 ]; then
# 		echo "Can not clone code from github $repo after $GITHUB_TRIES tries!"
# 		exit 1
# 	fi
# 	git -C $dest remote set-url origin $repo
# }
_install() {
	mkdir -p $SITE_ROOT/etc $SITE_ROOT/logs $SITE_ROOT/db $SITE_ROOT/tmp
	_git_config
	for _pathgit in $REPOS; do
		_path=$(echo $_pathgit | cut -d'|' -f1)
		_url=$(echo $_pathgit | cut -d'|' -f2)
		_branch=$(echo $_pathgit | cut -d'|' -f3)
		_git_clone $_url $_path $_branch
	done

	# service=gbc
	# _gitclone https://github.com/massbitprotocol/massbitroute_gbc /massbit/massbitroute/app/$service
	# #git clone https://github.com/massbitprotocol/massbitroute_gbc /massbit/massbitroute/app/$service
	# #git -C /massbit/massbitroute/app/$service remote set-url origin https://github.com/massbitprotocol/massbitroute_gbc

	# service=ssl
	# git clone "https://$user:$pass@git.${DOMAIN}/massbitroute/${service}.git" /etc/letsencrypt
	# git -C /etc/letsencrypt remote set-url origin "https://$user:$pass@git.${DOMAIN}/massbitroute/${service}.git"

	# service=mkagent
	# _gitclone https://github.com/massbitprotocol/massbitroute_mkagent $SITE_ROOT/etc/$service
	#git clone https://github.com/massbitprotocol/massbitroute_mkagent $SITE_ROOT/etc/$service
	#git -C $SITE_ROOT/etc/$service remote set-url origin https://github.com/massbitprotocol/massbitroute_mkagent

	#service=$type
	#git clone https://github.com/massbitprotocol/massbitroute_node $service_dir/$service
	#git -C $service_dir/$service remote set-url origin https://github.com/massbitprotocol/massbitroute_node

	ln -sf /massbit/massbitroute/app/gbc /massbit/massbitroute/app/src/gbc
	ln -sf /massbit/massbitroute/app/gbc/bin/openresty /usr/local/openresty
	apt-get update
	apt-get install -y git apache2-utils supervisor jq python-is-python2 libssl-dev libmaxminddb-dev
	systemctl enable supervisor
	systemctl start supervisor
	mkdir -p /etc/supervisor/conf.d
	cp supervisor.conf /etc/supervisor/conf.d/${TYPE}.conf
	supervisorctl update
}

# loop() {
# 	while true; do
# 		$0 $@
# 		sleep 3
# 	done
# }
# _deprecate() {
# 	n=$(ls http.d/*.conf | wc -l)
# 	if [ $n -ne 1 ]; then
# 		rm -rf http.d/*
# 	fi
# }
_load_config() {
	mkdir -p $SITE_ROOT/http.d
	# rm http.d/*
	# _deprecate
	is_reloading=0
	id=$(cat $SITE_ROOT/vars/ID)

	if [ ! -d "$SITE_ROOT/vars" ]; then mkdir -p $SITE_ROOT/vars; fi
	echo $type >$SITE_ROOT/vars/TYPE

	# $mbr $type nodeverify
	# $mbr $type register

	curl -sSfL $MBRAPI/deploy/${type}conf/${id}.conf -o http.d/${id}.conf.new
	if [ ! -f "http.d/${id}.conf" ]; then
		touch http.d/${id}.conf
	fi

	diff http.d/${id}.conf http.d/${id}.conf.new
	if [ $? -ne 0 ]; then
		mv http.d/${id}.conf.new http.d/${id}.conf
		is_reloading=1
	fi
	sed "s/__NODE_ID__/$id/g" etc/node.conf >http.d/node.conf0
	sed -i "s/__DOMAIN__/$DOMAIN/g" http.d/node.conf0
	return $is_reloading
}
_reload() {
	$SITE_ROOT/etc/mkagent/agents/push.sh _kill
	_debug
	$cmd _update
}
_monitor() {
	echo node >vars/TYPE
	is_reload=0
	_load_config
	is_reload=$?

	_update_sources $REPOS
	if [ $is_reload -eq 0 ]; then
		is_reload=$?
	fi

	if [ $is_reload -ne 0 ]; then
		$0 _reload
	fi
	# _load_config
	# is_reloading=$?
	# for d in /massbit/massbitroute/app/gbc \
	# 	$SITE_ROOT \
	# 	$SITE_ROOT/etc/mkagent \
	# 	/etc/letsencrypt; do
	# 	git -C $d pull origin master | grep -i "updating"
	# 	if [ $? -eq 0 ]; then
	# 		is_reloading=1
	# 	fi
	# done

	# # $git pull | grep -i "updating"
	# # if [ $? -eq 0 ]; then
	# # 	is_reload=1
	# # fi

	# if [ $is_reloading -ne 0 ]; then
	# 	$0 _reload
	# fi
	# $mbr $type register
	# $mbr $type ping
}

_run() {
	rm -rf $SITE_ROOT/tmp/*
	$SITE_ROOT/start_server
}

$@
