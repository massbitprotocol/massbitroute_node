#!/bin/bash
TYPE="node"
SITE_ROOT=$(realpath $(dirname $(realpath $0))/..)

export HOME=$SITE_ROOT

if [ -e "$SITE_ROOT/cmd_server" ]; then bash $SITE_ROOT/cmd_server _env; fi
if [ -f "$SITE_ROOT/.env_raw" ]; then source $SITE_ROOT/.env_raw; fi

source $SITE_ROOT/scripts/base.sh
# _load_env $SITE_ROOT
cd $SITE_ROOT

mbr_root=/massbit/massbitroute/app
service_dir=$mbr_root/src/sites/services

GIT_PUBLIC_URL="https://github.com"
export MBR_ENV=${MBR_ENV:-dev}
_repo() {
	REPOS="$mbr_root/gbc|$GIT_PUBLIC_URL/massbitprotocol/massbitroute_gbc.git|$MBR_ENV \
$SITE_ROOT|$GIT_PUBLIC_URL/massbitprotocol/massbitroute_${TYPE}.git|$MBR_ENV \
  $service_dir/mkagent|$GIT_PUBLIC_URL/massbitprotocol/massbitroute_mkagent.git|$MBR_ENV"
}
_repo

# _debug() {
# 	timeout 60 $SITE_ROOT/scripts/debug.sh
# }

_tune() {
	echo 2000000 >/proc/sys/fs/nr_open
	echo 2000000 >/proc/sys/fs/file-max
	ulimit -n 2000000
	cp /massbit/massbitroute/app/gbc/conf/limits.conf /etc/security/limits.d/mbr.conf
	cp /massbit/massbitroute/app/gbc/conf/.conf /etc/security/limits.d/mbr.conf
	cp /massbit/massbitroute/app/gbc/conf/sysctl.conf /etc/sysctl.d/99-mbr.conf
	sysctl -p
}

_init() {
	if [ ! -f "$SITE_ROOT/.env" ]; then
		echo "$MBR_ENV" >$SITE_ROOT/.env
	fi
	source $SITE_ROOT/.env
	_git_clone $GIT_PUBLIC_URL/massbitprotocol/massbitroute_gbc.git /massbit/massbitroute/app/gbc
	bash $SITE_ROOT/cmd_server _env
	source $SITE_ROOT/.env_raw
	_repo
}
_prepare() {
	echo "Prepare"
	mkdir -p $SITE_ROOT/etc $SITE_ROOT/logs/nginx $SITE_ROOT/db $SITE_ROOT/tmp $SITE_ROOT/http.d
	# rm -rf $SITE_ROOT/tmp/*

}

_install_repos() {
	_git_config
	_repo
	for _pathgit in $REPOS; do
		_path=$(echo $_pathgit | cut -d'|' -f1)
		_url=$(echo $_pathgit | cut -d'|' -f2)
		_branch=$(echo $_pathgit | cut -d'|' -f3)
		_git_clone $_url $_path $_branch
	done
}
_supervisor() {
	ln -sf /massbit/massbitroute/app/gbc /massbit/massbitroute/app/src/gbc
	ln -sf /massbit/massbitroute/app/gbc/bin/openresty /usr/local/openresty
	apt-get update
	apt-get install -y git apache2-utils supervisor jq python-is-python2 libssl-dev libmaxminddb-dev
	systemctl enable supervisor
	systemctl start supervisor
	mkdir -p /etc/supervisor/conf.d
	cp supervisor.conf /etc/supervisor/conf.d/${TYPE}.conf
	supervisorctl update
}
_install() {
	_init
	_prepare
	_install_repos
	_supervisor
}

_load_config() {
	mkdir -p $SITE_ROOT/http.d
	# $SITE_ROOT/mbr node nodeinfo
	is_reloading=0
	id=$(cat $SITE_ROOT/vars/ID)
	if [ -z "$id" ]; then return $is_reloading; fi

	curl -sSfL $MBRAPI/deploy/${TYPE}conf/${id}.conf -o http.d/${id}.conf.new
	if [ ! -f "http.d/${id}.conf" ]; then
		touch http.d/${id}.conf
	fi

	diff -s http.d/${id}.conf http.d/${id}.conf.new
	if [ $? -ne 0 ]; then
		mv http.d/${id}.conf.new http.d/${id}.conf
		is_reloading=1
	fi
	sed "s/__NODE_ID__/$id/g" etc/node.conf >http.d/node.conf0
	sed -i "s/__DOMAIN__/$DOMAIN/g" http.d/node.conf0
	return $is_reloading
}
_reload() {
	if [ ! -l "/etc/letsencrypt" ]; then
		rm -rf /etc/letsencrypt
		ln -sf /massbit/massbitroute/app/src/sites/services/node/ssl /etc/letsencrypt
	fi
	_tune
	systemctl | awk '/apt/{print $1}' | while read _s; do
		systemctl stop $_s
		systemctl disable $_s
	done
	$SITE_ROOT/etc/mkagent/agents/push.sh _kill
	$SITE_ROOT/cmd_server _update
}

_update_repos() {
	_repo
	_update_sources $REPOS
	_st_repo=$?
	return $_st_repo
}

_update() {
	echo "Update"
	_st_update=0

	_update_repos
	_st_update=$?

	_load_config
	_st=$?
	if [ $_st_update -eq 0 ]; then
		_st_update=$_st
	fi

	return $_st_update
}

_monitor() {
	echo node >vars/TYPE

	_update
	_st_monitor=$?

	if [ $_st_monitor -ne 0 ]; then
		$0 _reload
	fi

}

_run() {
	rm -rf $SITE_ROOT/tmp/*
	$SITE_ROOT/start_server
}

$@
